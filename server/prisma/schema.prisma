generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id            String   @id @default(cuid())
  code          String   @unique @db.VarChar(4)
  hostId        String
  maxPlayers    Int      @default(8)
  isActive      Boolean  @default(true)
  status        RoomStatus @default(WAITING)
  settings      Json     @default("{\"timer\": 20, \"questionsCount\": 10}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  players       RoomPlayer[]
  games         Game[]

  @@map("rooms")
}

model RoomPlayer {
  id           String   @id @default(cuid())
  roomId       String
  spotifyId    String
  displayName  String
  imageUrl     String?
  isHost       Boolean  @default(false)
  isReady      Boolean  @default(false)
  musicData         Json?    // Stores top tracks, artists, albums
  joinedAt          DateTime @default(now())
  reconnectionToken String?  // Token for reconnecting after disconnect
  deviceId          String?  // Spotify device ID for reconnection
  lastActiveAt      DateTime @default(now()) @updatedAt

  // Relations
  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  gameAnswers  GameAnswer[]
  gameScores   GameScore[]

  @@unique([roomId, spotifyId])
  @@map("room_players")
}

model Game {
  id               String      @id @default(cuid())
  roomId           String
  status           GameStatus  @default(STARTING)
  currentQuestion  Int         @default(0)
  totalQuestions   Int         @default(10)
  hostQuestionHash String?     // Verification hash from host
  startedAt        DateTime?
  endedAt          DateTime?
  createdAt        DateTime    @default(now())

  // Relations
  room             Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  answers          GameAnswer[]
  scores           GameScore[]

  @@map("games")
}

model GameAnswer {
  id              String     @id @default(cuid())
  gameId          String
  playerId        String
  questionNumber  Int
  selectedAnswer  Int        // 0-3 for multiple choice
  isCorrect       Boolean
  responseTime    Int        // milliseconds
  submittedAt     DateTime   @default(now())

  // Relations
  game            Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player          RoomPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameId, playerId, questionNumber])
  @@map("game_answers")
}

model GameScore {
  id             String     @id @default(cuid())
  gameId         String
  playerId       String
  totalScore     Int        @default(0)
  correctAnswers Int        @default(0)
  totalAnswers   Int        @default(0)
  averageTime    Int        @default(0) // milliseconds

  // Relations
  game           Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player         RoomPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameId, playerId])
  @@map("game_scores")
}

enum RoomStatus {
  WAITING
  STARTING
  IN_GAME
  FINISHED
}

enum GameStatus {
  STARTING
  IN_PROGRESS
  PAUSED
  FINISHED
  CANCELLED
}